function [ distribution_updated ] = collective_inference(distribution, hierarchy, connectivity, labels_code, labels_names,k, parameters_n, label_priors)
%%COLLECTIVE INFERENCE USING NEIGHBOR ON LE ONLY.
%this function performs one iteration of collective inferencing
%distribution: the estimated distribution over labels from the previous
%iteration.
%hierarchy: the adjmat for the hierarchy. Note the function DOESNT use it.
%connectivity: the adjmat for the connectivity matrix.
%labels_code: the coded labels.
%label_names: the unique label names in the order of their codes.
%k: With how many terms to truncate the summation. BY DEFAULT: Pass as no
%of labels.
%parameters_n: P(l_i|l_j,i-j are neighbors).
%label_priors: the frequency of various labels 
%distribution_updated: the updated distribution.
%symetricize connectivity
connectivity=max(connectivity,connectivity');
unknown=length(labels_names);
[no_of_nodes,no_of_labels]=size(distribution);
distribution_updated=zeros(size(distribution));
for i=1:no_of_nodes
    if(labels_code(i)==unknown)
    %i
    %find its unknown labels
    neighbors=(connectivity(i,:)==1);
    unknown_neighbors=neighbors & (labels_code==unknown);
    if(~isempty(labels_code(unknown_neighbors)))
    [kmostlikely,likelihoods]=k_best_assignments_n_2(distribution(unknown_neighbors,:),k);
    for j=1:k
        likelihood=likelihoods(j);
        assignment=labels_code(neighbors);
        %assignment
        %kmostlikely{j}
        assignment(assignment==unknown)=kmostlikely{j};
        %assignment
        distribution_updated(i,:)=distribution_updated(i,:)+likelihood*node_model(assignment,parameters_n,label_priors);
    end
    else
        assignment=labels_code(neighbors);
        distribution_updated(i,:)=node_model(assignment,parameters_n,label_priors);
    end
    distribution_updated(i,:)=distribution_updated(i,:)/sum(distribution_updated(i,:));
    end
end
end

